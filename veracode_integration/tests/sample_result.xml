<?xml version="1.0" encoding="ISO-8859-1"?>

<detailedreport xmlns="https://www.veracode.com/schema/reports/export/1.0" report_format_version="1.1" app_name="WebGoat" app_id="13252" version="5.0" build_id="13441" submitter="Timothy Jarrett" platform="Java" assurance_level="5" business_criticality="5" generation_date="2012-01-11 21:16:35 UTC" veracode_level="VL1" total_flaws="199" flaws_not_mitigated="196" teams="Customer Demo Team,East Coast" life_cycle_stage="Deployed (In production and actively developed)" planned_deployment_date="" last_update_time="2010-06-23 13:51:59 UTC" is_latest_build="true" policy_name="OWASP Only Policy" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" any_type_scan_due="2010-06-23 13:51:59 UTC" business_owner="" business_unit="" tags="demo">
   <static-analysis rating="D" score="61" submitted_date="2009-04-23 21:03:50 UTC" published_date="2009-10-19 13:31:32 UTC" mitigated_rating="D" mitigated_score="61">
      <modules>
         <module name="WebGoat-5.0-orig.war" compiler="JAVAC_6" os="Java J2SE 6" architecture="JVM" score="0" numflawssev0="0" numflawssev1="0" numflawssev2="12" numflawssev3="120" numflawssev4="23" numflawssev5="1"/>
      </modules>
   </static-analysis>
   <dynamic-analysis rating="D" score="87" submitted_date="2009-08-03 16:55:16 UTC" published_date="2009-10-19 13:32:07 UTC">
      <modules>
         <module name="dynamic_analysis" compiler="Unknown" os="" architecture="" score="0" numflawssev0="0" numflawssev1="0" numflawssev2="2" numflawssev3="7" numflawssev4="4" numflawssev5="1" target_url="http://www.webgoatdemo.com"/>
      </modules>
   </dynamic-analysis>
   <manual-analysis rating="F" score="41" submitted_date="2010-06-23 13:51:50 UTC" published_date="2010-06-23 13:51:59 UTC">
      <cia_adjustment>-10</cia_adjustment>
      <delivery_consultant>Joe Delivery</delivery_consultant>
      <modules>
         <module name="manual_analysis" compiler="Unknown" os="" architecture="" score="0" numflawssev0="0" numflawssev1="0" numflawssev2="3" numflawssev3="10" numflawssev4="7" numflawssev5="9"/>
      </modules>
   </manual-analysis>
   <severity level="5">
      <category categoryid="29" categoryname="Authorization Issues" pcirelated="true">
         <desc>
            <para text="Authorization is the process or method by which an application determines whether a user, service, or application has the necessary permissions to perform a requested action.  Web applications often restrict access to specific content or functionality based on the user's role or privilege level.  If authorization is not implemented properly, an attacker can manipulate a web site to gain access to data or functionality that should be protected."/>
            <para text="Authorization should not be confused with authentication.  Authentication is the process of verifying a user's identity, while authorization enforces what that user is permitted to do after they have successfully authenticated to the system."/>
         </desc>
         <recommendations>
            <para text="Be sure that authorization is properly enforced at the server side for every action.  Centralize authorization routines when possible.  Follow the principle of least privilege when designing security controls."/>
         </recommendations>
         <cwe cweid="425" cwename="Direct Request ('Forced Browsing')" pcirelated="true">
            <description>
               <text text="The web application fails to adequately enforce appropriate authorization on all restricted URLs, scripts or files. Such web applications often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path."/>
            </description>
            <manualflaws>
               <flaw severity="5" categoryname="Direct Request ('Forced Browsing')" count="1" issueid="190" module="manual_analysis" type="" description="The application provides different roles for users which determine which functions will be exposed to a user once they have authenticated to the system. The application does not perform an authorization check on the user's request which permits any user, no matter which role they are assigned to, to access all functionality within the application. This means that all users can access administrative functionality in the application by simply requesting the appropriate page." note="" cweid="425" remediationeffort="4" exploitLevel="2" categoryid="29" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" location="" cvss="9.1" capecid="6" exploitdifficulty="0" inputvector="https://app.biz.com/account/admin/addAccount.do">
                  <remediation_desc>If the application is intended to prevent access to some users to administrative functionality then a check needs to be added to restricted pages to check for the logged in user's group prior to allowing access to sensitive pages.</remediation_desc>
               </flaw>
            </manualflaws>
         </cwe>
      </category>
      <category categoryid="18" categoryname="OS Command Injection" pcirelated="true">
         <desc>
            <para text="OS command injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct and execute a system command.  This allows an attacker to either alter the command executed by the application or append additional commands.  The command is typically executed with the privileges of the executing process and gives an attacker a privilege or capability that he would not otherwise have."/>
         </desc>
         <recommendations>
            <para text="Careful handling of all untrusted data is critical in preventing OS command injection attacks.   Using one or more of the following techniques provides defense-in-depth and minimizes the likelihood of an vulnerability.">
               <bulletitem text="If possible, use library calls rather than external processes to recreate the desired functionality."/>
               <bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Select safe API routines.  Some APIs that execute system commands take an array of strings as input rather than a single string, which protects against some forms of command injection by ensuring that a user-supplied argument cannot be interpreted as part of the command."/>
            </para>
         </recommendations>
         <cwe cweid="78" cwename="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" pcirelated="true">
            <description>
               <text text="This call contains a command injection flaw.  The argument to the function is constructed using user-supplied input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
            </description>
            <staticflaws>
               <flaw severity="5" categoryname="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" count="1" issueid="33" module="WebGoat-5.0-orig.war" type="java.lang.Runtime.exec" description="This call to java.lang.Runtime.exec() contains a command injection flaw. The argument to the function is constructed using user-supplied input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs the execute system commands also have a &quot;safe&quot; version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.

References: 
CWE (http://cwe.mitre.org/data/definitions/78.html) 
OWASP (http://www.owasp.org/index.php/Command_Injection)

" note="" cweid="78" remediationeffort="3" exploitLevel="1" categoryid="18" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ccp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Exec.java" line="292" sourcefilepath="org/owasp/webgoat/util/" scope="" functionprototype="" functionrelativelocation="0">
                  <mitigations>
                     <mitigation action="Mitigated by Design" description="The functionality is only accessible to an admin." user="Timothy Jarrett" date="2009-10-29 19:08:31 UTC"/>
                     <mitigation action="Mitigated by Network Environment" description="test" user="Fergal Glynn" date="2009-11-10 18:04:13 UTC"/>
                  </mitigations>
                  <annotations>
                     <annotation action="Comment" description="WE should fix this" user="Timothy Jarrett" date="2009-05-08 18:46:23 UTC"/>
                     <annotation action="Comment" description="This should be fixed" user="Fergal Glynn" date="2009-11-06 20:06:57 UTC"/>
                  </annotations>
               </flaw>
            </staticflaws>
            <dynamicflaws>
               <flaw severity="5" categoryname="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" count="1" issueid="182" module="dynamic_analysis" type="Failure to Preserve OS Command Structure ('OS Command Injection')" description="This call contains a command injection flaw. The argument to the function is constructed using user-supplied input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs the execute system commands also have a &quot;safe&quot; version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=78) 
OWASP (http://www.owasp.org/index.php/Command_Injection)

" note="" cweid="78" remediationeffort="3" categoryid="18" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ccp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/WebGoat/attack"/>
            </dynamicflaws>
         </cwe>
      </category>
      <category categoryid="-1" categoryname="Other" pcirelated="true">
         <desc>
            <para text="These flaws do not fit into one of Veracode's existing categories."/>
         </desc>
         <recommendations>
            <para text="Please see individual flaw descriptions for remediation guidance."/>
         </recommendations>
         <cwe cweid="639" cwename="Authorization Bypass Through User-Controlled Key" pcirelated="true">
            <description>
               <text text="The system's access control functionality does not prevent one user from gaining access to another user's records by modifying the key value identifying the record. Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system. One manifestation of this weakness would be if a system used sequential or otherwise easily guessable session ids that would allow one user to easily switch to another user's session and view/modify their data."/>
            </description>
            <manualflaws>
               <flaw severity="5" categoryname="Authorization Bypass Through User-Controlled Key" count="1" issueid="191" module="manual_analysis" type="" description="The application divides users between different business units but not all queries incorporate the business unit ID in the SQL query." note="" cweid="639" remediationeffort="4" exploitLevel="2" categoryid="-1" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" location="" cvss="9.1" capecid="6" exploitdifficulty="0" inputvector="https://app.biz.com/account/updateUser.do">
                  <severity_desc>A user can simply iterate through all possible business unit IDs and access data outside of their business unit.</severity_desc>
                  <remediation_desc>Review all application database requests to ensure that they include the proper where clause parameters limiting access to data based on the authenticated user's business unit ID.</remediation_desc>
               </flaw>
            </manualflaws>
         </cwe>
      </category>
      <category categoryid="19" categoryname="SQL Injection" pcirelated="true">
         <desc>
            <para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
               <bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
               <bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded (%xx), HTML-encoded (&amp;#xx;), or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
               <bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
            </para>
         </recommendations>
         <cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" pcirelated="true">
            <description>
               <text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
            </description>
            <manualflaws>
               <flaw severity="5" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="7" issueid="192" module="manual_analysis" type="" description="Various pages within the application allow for direction insertion of attacker controlled SQL syntax into the requests executed on the database. " note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" location="" cvss="9.5" capecid="7" exploitdifficulty="0" inputvector="https://app.biz.com/account/login.do
https://app.biz.com/search
">
                  <remediation_desc>Review all application pages for similar inclusion of unvalidated user input into SQL queries. All user supplied input must be considered tainted and should not be included directly into SQL queries submitted to the database. Additionally, parameterized queries should always be used to minimize the impact of any SQL queries and not built directly from tainted user supplied input.</remediation_desc>
               </flaw>
            </manualflaws>
         </cwe>
      </category>
   </severity>
   <severity level="4">
      <category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="true">
         <desc>
            <para text="Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
            <para text="XSS vulnerabilities can be either persistent or transient (often referred to as stored and reflected, respectively).  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
               <bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code (a common technique in Web 2.0 applications), additional restrictions may be necessary beyond simple HTML encoding."/>
               <bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
            </para>
         </recommendations>
         <cwe cweid="79" cwename="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" pcirelated="true">
            <description>
               <text text="The application does not filter text or other data for basic XSS attack syntax (&lt;, &gt;, and &amp;). This enables an attacker to craft arbitrary HTML content. This vulnerability typically requires that an attacker be able to submit JavaScript &lt;script&gt; tags as part of a field that is re-displayed to one or more users. The &lt;script&gt; tag contains instructions that are executed in a user's web browser, not on the web application server. JavaScript functions can be used to write raw HTML, read cookie values, pull JavaScript code from a third-party web server, or send data to a third-party web server."/>
            </description>
            <manualflaws>
               <flaw severity="4" categoryname="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" count="3" issueid="193" module="manual_analysis" type="" description="The application does not validate user supplied input when creating content on the site such as reports or alerts. A number of cross-site scripting injection points were found during testing that could be used by an attacker to supply active client-side script which would be executed by other users of the system when the page is loaded. The malicious script is stored in the database and incorporated into the resulting page that user's view and requires no action from the victim." note="" cweid="79" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" location="" cvss="8.3" capecid="7" exploitdifficulty="0" inputvector="https://app.biz.com/welcome.do
https://app.biz.com/searchResult.do
https://app.biz.com/calendar.do">
                  <remediation_desc>All user supplied input should validated before being stored in the database. Any data which is incorporated into HTML returned to users needs to be validated to ensure that no malicious active content is included. A white list approach should be taken validating that the user supplied data meets the expected requirements.</remediation_desc>
               </flaw>
            </manualflaws>
         </cwe>
      </category>
      <category categoryid="-1" categoryname="Other" pcirelated="true">
         <desc>
            <para text="These flaws do not fit into one of Veracode's existing categories."/>
         </desc>
         <recommendations>
            <para text="Please see individual flaw descriptions for remediation guidance."/>
         </recommendations>
         <cwe cweid="20" cwename="Improper Input Validation" pcirelated="false">
            <description>
               <text text="An invalid character submitted in a URL parameter causes an error in the database query or script execution. This indicates that the application has not fully validated user-supplied input. These errors can lead to HTML injection, SQL injection, or arbitrary code execution."/>
            </description>
            <manualflaws>
               <flaw severity="4" categoryname="Improper Input Validation" count="2" issueid="195" module="manual_analysis" type="" description="The application leaked information about the OpenSSL version and reported it at version 0.9.7a. This version includes a number of potential parsing errors which could lead to a denial of service attack. The site is also using libcurl/7.12.1 which has a known buffer overflow vulnerability in the URL handling code that an attacker might be able to exploit." note="More information can be found at http://curl.haxx.se/docs/security.html" cweid="20" remediationeffort="2" exploitLevel="2" categoryid="-1" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="" grace_period_expires="" affects_policy_compliance="false" location="" cvss="6.5" capecid="8" exploitdifficulty="0" inputvector="https://app.biz.com/admin/log">
                  <remediation_desc>Consider upgrading to the newest version of OpenSSL and libCURL code available to prevent the possible exploitation of known vulnerabilities.</remediation_desc>
               </flaw>
            </manualflaws>
         </cwe>
         <cwe cweid="307" cwename="Improper Restriction of Excessive Authentication Attempts" pcirelated="true">
            <description>
               <text text="The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks."/>
            </description>
            <manualflaws>
               <flaw severity="4" categoryname="Improper Restriction of Excessive Authentication Attempts" count="1" issueid="196" module="manual_analysis" type="" description="The application does not keep count of the number of failed logins attempts for an account therefore allowing for the possibility that an attacker can repeatedly guess a user's password in an attempt to bruteforce access to an individual user's account. This attack can be easily automated by an attacker." note="" cweid="307" remediationeffort="3" exploitLevel="2" categoryid="-1" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" location="" cvss="6.5" capecid="3" exploitdifficulty="0" inputvector="">
                  <remediation_desc>Keep a count on the server of the number of failed log in attempts for a user and mark the account as locked when the number of consecutive unsuccessful login attempts reaches a reasonable threshold (typically 3 to 5 failed attempts in a row). Require a user to go through the forgotten password process to remove the lock on their account.</remediation_desc>
               </flaw>
            </manualflaws>
         </cwe>
         <cwe cweid="521" cwename="Weak Password Requirements" pcirelated="true">
            <description>
               <text text="The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts."/>
            </description>
            <manualflaws>
               <flaw severity="4" categoryname="Weak Password Requirements" count="1" issueid="194" module="manual_analysis" type="" description="The application does not require an account to have a strong password. A user's account can be created with a password which is easy to brute force, especially considering the application does not lock out a user's account after a number of failed login attempts." note="" cweid="521" remediationeffort="3" exploitLevel="2" categoryid="-1" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" location="" cvss="6.5" capecid="3" exploitdifficulty="0" inputvector="https://app.biz.com/account/login.do">
                  <remediation_desc>Consider requiring that all user account passwords meet a minimum requirement of 8 characters, with a mix of alpha-numeric and special characters.</remediation_desc>
               </flaw>
            </manualflaws>
         </cwe>
      </category>
      <category categoryid="19" categoryname="SQL Injection" pcirelated="true">
         <desc>
            <para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
               <bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
               <bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded (%xx), HTML-encoded (&amp;#xx;), or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
               <bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
            </para>
         </recommendations>
         <cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" pcirelated="true">
            <description>
               <text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
            </description>
            <staticflaws>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="119" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="BackDoors.java" line="106" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="110" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="BackDoors.java" line="113" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="84" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="BlindSqlInjection.java" line="122" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="82" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Challenge2Screen.java" line="220" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="126" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="DOS_Login.java" line="114" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="4" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="DOS_Login.java" line="134" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0">
                  <mitigations>
                     <mitigation action="Mitigated by Network Environment" description="We have a WAF to protect against this flaw" user="Fergal Glynn" date="2009-11-06 20:08:09 UTC"/>
                     <mitigation action="Mitigated as Potential False Positive" description="this is a false positive because ......" user="Fergal Glynn" date="2009-11-19 14:21:52 UTC"/>
                     <mitigation action="Mitigated as Potential False Positive" description="I think this is a false positive..." user="Erik Peterson" date="2009-11-23 19:56:49 UTC"/>
                     <mitigation action="Mitigated by Network Environment" description="There is a WAF which will block this type of attack" user="Matt Lantinga" date="2010-06-15 19:52:37 UTC"/>
                  </mitigations>
                  <annotations>
                     <annotation action="Comment" description="Fergal working on this" user="Fergal Glynn" date="2009-10-28 17:05:13 UTC"/>
                     <annotation action="Mitigated as Potential False Positive" description="this is a false positive because ......" user="Fergal Glynn" date="2009-11-19 14:21:52 UTC"/>
                     <annotation action="Mitigated as Potential False Positive" description="I think this is a false positive..." user="Erik Peterson" date="2009-11-23 19:56:49 UTC"/>
                     <annotation action="Comment" description="&lt;b&gt;test" user="Anthony Guida" date="2010-10-08 14:41:26 UTC"/>
                  </annotations>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="152" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Login.java" line="148" sourcefilepath="org/owasp/webgoat/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="91" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Login.java" line="149" sourcefilepath="org/owasp/webgoat/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="132" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Login.java" line="191" sourcefilepath="org/owasp/webgoat/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="150" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="SqlNumericInjection.java" line="130" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="60" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="SqlStringInjection.java" line="112" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="9" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ThreadSafetyProblem.java" line="103" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="23" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="UpdateProfile.java" line="176" sourcefilepath="org/owasp/webgoat/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="123" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="UpdateProfile.java" line="225" sourcefilepath="org/owasp/webgoat/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="116" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="UpdateProfile.java" line="248" sourcefilepath="org/owasp/webgoat/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="17" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="UpdateProfile.java" line="295" sourcefilepath="org/owasp/webgoat/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0">
                  <mitigations>
                     <mitigation action="Mitigated as Potential False Positive" description="This is not a flaw. I think there is a bug." user="Fergal Glynn" date="2009-11-06 20:27:01 UTC"/>
                  </mitigations>
                  <annotations>
                     <annotation action="Mitigated as Potential False Positive" description="This is not a flaw. I think there is a bug." user="Fergal Glynn" date="2009-11-06 20:27:01 UTC"/>
                  </annotations>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="67" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="UpdateProfile.java" line="297" sourcefilepath="org/owasp/webgoat/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="19" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="UpdateProfile.java" line="340" sourcefilepath="org/owasp/webgoat/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="61" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="UpdateProfile.java" line="382" sourcefilepath="org/owasp/webgoat/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0">
                  <annotations>
                     <annotation action="Comment" description="Test Comment" user="Greg Leeds" date="2010-09-29 15:23:46 UTC"/>
                  </annotations>
               </flaw>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="136" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewDatabase.java" line="89" sourcefilepath="org/owasp/webgoat/lessons/admin/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="153" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.java" line="118" sourcefilepath="org/owasp/webgoat/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="83" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.java" line="178" sourcefilepath="org/owasp/webgoat/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="8" module="WebGoat-5.0-orig.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/89.html) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" exploitLevel="1" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="WsSqlInjection.java" line="240" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0">
                  <mitigations>
                     <mitigation action="Mitigated by Network Environment" description="A WAF is configured to mitigate this exact flaw" user="Fergal Glynn" date="2009-10-28 17:06:22 UTC"/>
                  </mitigations>
               </flaw>
            </staticflaws>
            <dynamicflaws>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="179" module="dynamic_analysis" type="Failure to Preserve SQL Query Structure ('SQL Injection')" description="This database query contains a SQL injection flaw. The function call constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=89) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/WebGoat/attack"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="180" module="dynamic_analysis" type="Failure to Preserve SQL Query Structure ('SQL Injection')" description="This database query contains a SQL injection flaw. The function call constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=89) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/WebGoat/attack"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="181" module="dynamic_analysis" type="Failure to Preserve SQL Query Structure ('SQL Injection')" description="This database query contains a SQL injection flaw. The function call constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=89) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/WebGoat/attack"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" count="1" issueid="178" module="dynamic_analysis" type="Failure to Preserve SQL Query Structure ('SQL Injection')" description="This database query contains a SQL injection flaw. The function call constructs a dynamic SQL query using a variable derived from user-supplied input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database.

Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=89) 
OWASP (http://www.owasp.org/index.php/SQL_injection)

" note="" cweid="89" remediationeffort="3" categoryid="19" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppp" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/WebGoat/attack"/>
            </dynamicflaws>
         </cwe>
      </category>
   </severity>
   <severity level="3">
      <category categoryid="11" categoryname="Authentication Issues" pcirelated="true">
         <desc>
            <para text="Authentication is the process of attempting to verify the digital identity of the sender of a communication such as a request to login to an application. Authentication is a way to ensure users are who they claim to be and that the user who attempts to perform functions in a system is in fact the user who is authorized to do so.  When an application does not properly ensure that the user has proven their identity or provides a way to bypass or circumvent the authentication process, the security of the application is compromised."/>
         </desc>
         <recommendations>
            <para text="When using password systems, implement strong password complexity requirements to evade brute force attacks, and ensure that accounts with default or predictable credentials are removed from production systems.  Re-authenticate users for high-value transactions and access to protected areas.  Use the most appropriate form of authentication for the assets being protected, e.g. multi-factor authentication for high assurance applications."/>
         </recommendations>
         <cwe cweid="352" cwename="Cross-Site Request Forgery (CSRF)" pcirelated="true">
            <description>
               <text text="The web product does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request."/>
            </description>
            <manualflaws>
               <flaw severity="3" categoryname="Cross-Site Request Forgery (CSRF)" count="1" issueid="199" module="manual_analysis" type="" description="The application makes use of form tokens in certain places in an attempt to prevent request forgery attacks against users of the system. However, this CSRF protection is not consistently applied throughout the application and therefore leaves users of the system vulnerable to this form of attack. The functionality is not used, for example, when updating a user's email address." note="" cweid="352" remediationeffort="4" exploitLevel="2" categoryid="11" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" location="" cvss="5.3" capecid="4" exploitdifficulty="0" inputvector="">
                  <remediation_desc>Apply the current CSRF protections written into the application across all functions which modify user data or commit transactions. </remediation_desc>
               </flaw>
            </manualflaws>
         </cwe>
      </category>
      <category categoryid="21" categoryname="CRLF Injection" pcirelated="false">
         <desc>
            <para text="The acronym CRLF stands for &quot;Carriage Return, Line Feed&quot; and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  "/>
         </desc>
         <recommendations>
            <para text="Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents."/>
         </recommendations>
         <cwe cweid="113" cwename="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" pcirelated="false">
            <description>
               <text text="A function call contains an HTTP response splitting flaw.  Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="43" module="WebGoat-5.0-orig.war" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="config.jsp" line="10" sourcefilepath="/lessons/ConfManagement/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="34" module="WebGoat-5.0-orig.war" type="javax.servlet.http.HttpServletResponse.setHeader" description="This call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="HttpOnly.java" line="198" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="36" module="WebGoat-5.0-orig.war" type="javax.servlet.http.HttpServletResponse.setHeader" description="This call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="HttpOnly.java" line="212" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" count="1" issueid="37" module="WebGoat-5.0-orig.war" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains an HTTP response splitting flaw. Writing unsanitized user-supplied input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks.

Remove unexpected carriage returns and line feeds from user-supplied data used to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/113.html) 
OWASP (http://www.owasp.org/index.php/HTTP_Response_Splitting)

" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="redirect.jsp" line="10" sourcefilepath="/lessons/General/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
         <cwe cweid="117" cwename="Improper Output Neutralization for Logs" pcirelated="false">
            <description>
               <text text="A function call could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="12" module="WebGoat-5.0-orig.war" type="javax.servlet.GenericServlet.log" description="This call to javax.servlet.GenericServlet.log() could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.

Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by removing unexpected carriage returns and line feeds and using HTML entity encoding for all non-alphanumeric data. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/117.html) 
OWASP (http://www.owasp.org/index.php/Log_injection)

" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" sourcefile="HammerHead.java" line="306" sourcefilepath="org/owasp/webgoat/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="17" categoryname="Code Quality" pcirelated="false">
         <desc>
            <para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to:">
               <bulletitem text="Neglecting to remove debug code or dead code"/>
               <bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
               <bulletitem text="Using the incorrect operator to compare objects"/>
               <bulletitem text="Failing to follow an API or framework specification"/>
               <bulletitem text="Using a language feature or API in an unintended manner"/>
            </para>
            <para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
         </desc>
         <recommendations>
            <para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="489" cwename="Leftover Debug Code" pcirelated="false">
            <description>
               <text text="A method may be leftover debug code that creates an unintended entry point in a web application.  Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method.  Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="94" module="WebGoat-5.0-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="CreateDB.java" line="53" sourcefilepath="org/owasp/webgoat/session/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="149" module="WebGoat-5.0-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="Encoding.java" line="744" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="66" module="WebGoat-5.0-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="Exec.java" line="505" sourcefilepath="org/owasp/webgoat/util/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Leftover Debug Code" count="1" issueid="26" module="WebGoat-5.0-orig.war" type="main" description="The main() method may be leftover debug code that creates an unintended entry point in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method. Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.

Eliminate unnecessary entry points in deployed web applications to reduce the attack surface. Ensure that this is not a backdoor disguised as debugging functionality.

References: 
CWE (http://cwe.mitre.org/data/definitions/489.html)

" note="" cweid="489" remediationeffort="2" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="WebgoatProperties.java" line="114" sourcefilepath="org/owasp/webgoat/session/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
         <cwe cweid="597" cwename="Use of Wrong Operator in String Comparison" pcirelated="false">
            <description>
               <text text="Using '==' to compare two strings for equality or '!=' for inequality actually compares the object references rather than their values.  It is unlikely that this reflects the intended application logic."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="16" module="WebGoat-5.0-orig.war" type="neq" description="Using '!=' to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '!=' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="WeakAuthenticationCookie.java" line="142" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="162" module="WebGoat-5.0-orig.war" type="neq" description="Using '!=' to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '!=' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="XMLInjection.java" line="280" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="1" module="WebGoat-5.0-orig.war" type="neq" description="Using '!=' to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '!=' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="XMLInjection.java" line="282" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="128" module="WebGoat-5.0-orig.war" type="neq" description="Using '!=' to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '!=' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="XMLInjection.java" line="292" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="10" categoryname="Credentials Management" pcirelated="true">
         <desc>
            <para text="Improper management of credentials, such as usernames and passwords, may compromise system security.  In particular, storing passwords in plaintext or hard-coding passwords directly into application code are design issues that cannot be easily remedied.  Not only does embedding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult.  Once the code is in production, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack, putting customers at risk."/>
            <para text="One variation on hard-coding plaintext passwords is to hard-code a constant string which is the result of a cryptographic one-way hash.  For example, instead of storing the word &quot;secret,&quot; the application stores an MD5 hash of the word.  This is a common mechanism for obscuring hard-coded passwords from casual viewing but does not significantly reduce risk.  However, using cryptographic hashes for data stored outside the application code can be an effective practice."/>
         </desc>
         <recommendations>
            <para text="Avoid storing passwords in easily accessible locations, and never store any type of sensitive data in plaintext.  Avoid using hard-coded usernames, passwords, or hash constants whenever possible, particularly in relation to security-critical components.   Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in alternate locations such as configuration or properties files."/>
         </recommendations>
         <cwe cweid="259" cwename="Use of Hard-coded Password" pcirelated="true">
            <description>
               <text text="A method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="18" module="WebGoat-5.0-orig.war" type="getConnection" description="The getConnection() method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.

Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files.

References: 
CWE (http://cwe.mitre.org/data/definitions/259.html)

" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="CreateDB.java" line="69" sourcefilepath="org/owasp/webgoat/session/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="true">
         <desc>
            <para text="Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
            <para text="XSS vulnerabilities can be either persistent or transient (often referred to as stored and reflected, respectively).  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
               <bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code (a common technique in Web 2.0 applications), additional restrictions may be necessary beyond simple HTML encoding."/>
               <bulletitem text="Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
            </para>
         </recommendations>
         <cwe cweid="79" cwename="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" pcirelated="true">
            <description>
               <text text="The application does not filter text or other data for basic XSS attack syntax (&lt;, &gt;, and &amp;). This enables an attacker to craft arbitrary HTML content. This vulnerability typically requires that an attacker be able to submit JavaScript &lt;script&gt; tags as part of a field that is re-displayed to one or more users. The &lt;script&gt; tag contains instructions that are executed in a user's web browser, not on the web application server. JavaScript functions can be used to write raw HTML, read cookie values, pull JavaScript code from a third-party web server, or send data to a third-party web server."/>
            </description>
            <manualflaws>
               <flaw severity="3" categoryname="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" count="8" issueid="197" module="manual_analysis" type="" description="Many pages throughout the application incorporate a user's input as part of the data returned for a user's request. Since this data is not validated prior to being included in the HTML rendered by a user's browser, a reflective cross-site scripting attack is possible against users of the application." note="" cweid="79" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" location="" cvss="5.8" capecid="7" exploitdifficulty="0" inputvector="https://app.biz.com/search.do
https://app.biz.com/account/accountInfo.do">
                  <exploit_desc>An attacker would need to entice or trick a user into submitting a request with the script to be executed by the user.</exploit_desc>
                  <remediation_desc>Validate all user supplied input prior to submitting it to backend applications for processing. If user supplied input is required to be echoed back to the user then encode special characters to prevent them from being interpreted by a user's browser.</remediation_desc>
               </flaw>
            </manualflaws>
         </cwe>
         <cwe cweid="83" cwename="Improper Neutralization of Script in Attributes in a Web Page" pcirelated="true">
            <description>
               <text text="The application does not filter text or other data for potentially malicious HTML content. This enables an attacker to craft arbitrary HTML content. This vulnerability typically requires that an attacker be able to submit JavaScript &lt;script&gt; tags as part of a field that is re-displayed to one or more users. The &lt;script&gt; tag contains instructions that are executed in a user's web browser, not on the web application server. JavaScript functions can be used to write raw HTML, read cookie values, pull JavaScript code from a third-party web server, or send data to a third-party web server."/>
            </description>
            <dynamicflaws>
               <flaw severity="3" categoryname="Improper Neutralization of Script in Attributes in a Web Page" count="1" issueid="189" module="dynamic_analysis" type="Failure to Sanitize Script in Attributes in a Web Page" description="The application does not filter text or other data for potentially malicious HTML content. This enables an attacker to craft arbitrary HTML content. This vulnerability typically requires that an attacker be able to submit JavaScript &lt;script&gt; tags as part of a field that is re-displayed to one or more users. The &lt;script&gt; tag contains instructions that are executed in a user's web browser, not on the web application server. JavaScript functions can be used to write raw HTML, read cookie values, pull JavaScript code from a third-party web server, or send data to a third-party web server.

Cross-site scripting and HTML injection attacks can be defeated by applying robust input validation filters for all data received from the web browser. Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application. If users are permitted to include HTML entities, then limit access to specific elements or attributes. Use the programming language's built-in routines to remove potentially malicious characters.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=83) 
OWASP (http://www.owasp.org/index.php/Cross_Site_Scripting)

" note="" cweid="83" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/WebGoat/attack"/>
            </dynamicflaws>
         </cwe>
         <cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" pcirelated="true">
            <description>
               <text text="This call contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="124" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="16" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="69" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="16" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="78" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="16" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="139" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="21" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="74" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="22" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="160" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="22" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="151" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="28" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="28" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="29" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="44" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="29" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="27" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="33" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="31" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="34" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="125" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="34" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="159" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="40" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="20" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="41" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="143" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="41" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="175" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="46" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="95" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="47" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="142" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="47" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="173" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="53" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="88" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="54" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="172" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="54" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="38" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="66" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="58" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="67" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="5" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="67" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="169" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="79" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="29" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="80" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="89" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="80" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="114" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="89" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="105" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="94" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="134" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="94" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="75" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="94" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="118" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="103" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="130" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="103" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="107" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="109" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="40" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="109" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="166" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="110" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="106" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="123" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="155" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="123" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="163" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="EditProfile.jsp" line="126" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="81" module="WebGoat-5.0-orig.war" type="java.io.PrintWriter.print" description="This call to java.io.PrintWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="HttpSplitting.java" line="112" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="137" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ListStaff.jsp" line="24" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="148" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ListStaff.jsp" line="25" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="80" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ListStaff.jsp" line="25" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="96" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Login.jsp" line="25" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="115" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Login.jsp" line="25" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="154" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Login.jsp" line="25" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="164" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="main.jsp" line="114" sourcefilepath="/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="102" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="main.jsp" line="119" sourcefilepath="/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="104" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="main.jsp" line="124" sourcefilepath="/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="141" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="main.jsp" line="130" sourcefilepath="/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="167" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="main.jsp" line="135" sourcefilepath="/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="122" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="main.jsp" line="163" sourcefilepath="/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="100" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="main.jsp" line="180" sourcefilepath="/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="49" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="main.jsp" line="191" sourcefilepath="/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="73" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="main.jsp" line="200" sourcefilepath="/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="41" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="SearchStaff.jsp" line="11" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="55" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="SearchStaff.jsp" line="11" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="72" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="SearchStaff.jsp" line="11" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="2" module="WebGoat-5.0-orig.war" type="java.io.PrintWriter.print" description="This call to java.io.PrintWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="SilentTransactions.java" line="94" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="22" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="16" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="133" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="16" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="14" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="18" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="112" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="22" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="50" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="22" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="7" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="24" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="127" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="29" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="147" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="29" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="79" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="33" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="117" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="34" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="45" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="34" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="108" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="38" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="101" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="41" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="90" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="41" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="46" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="45" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="59" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="47" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="3" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="47" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0">
                  <annotations>
                     <annotation action="Comment" description="This is interesting, I'll need to research it." user="Matt Lantinga" date="2010-06-11 19:30:25 UTC"/>
                  </annotations>
               </flaw>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="111" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="51" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="56" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="54" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="144" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="54" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="98" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="58" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="42" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="67" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="57" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="67" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="10" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="71" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="6" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="80" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="161" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="80" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="71" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="86" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="30" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="91" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="51" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="93" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="65" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="95" sourcefilepath="/lessons/RoleBasedAccessControl/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="157" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="99" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="86" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="99" sourcefilepath="/lessons/SQLInjection/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="109" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="105" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="140" module="WebGoat-5.0-orig.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entity encoding for all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.

References: 
CWE (http://cwe.mitre.org/data/definitions/79.html) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="ViewProfile.jsp" line="171" sourcefilepath="/lessons/CrossSiteScripting/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
            <dynamicflaws>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="186" module="dynamic_analysis" type="Improper Sanitization of Script-Related HTML Tags in a Web Page (Basic XSS)" description="This call contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entities to encode all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=80) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/WebGoat/attack"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="188" module="dynamic_analysis" type="Improper Sanitization of Script-Related HTML Tags in a Web Page (Basic XSS)" description="This call contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entities to encode all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=80) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/WebGoat/attack"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="185" module="dynamic_analysis" type="Improper Sanitization of Script-Related HTML Tags in a Web Page (Basic XSS)" description="This call contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entities to encode all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=80) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/WebGoat/attack"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="183" module="dynamic_analysis" type="Improper Sanitization of Script-Related HTML Tags in a Web Page (Basic XSS)" description="This call contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entities to encode all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=80) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/WebGoat/attack"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="184" module="dynamic_analysis" type="Improper Sanitization of Script-Related HTML Tags in a Web Page (Basic XSS)" description="This call contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entities to encode all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=80) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/WebGoat/attack"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" count="1" issueid="187" module="dynamic_analysis" type="Improper Sanitization of Script-Related HTML Tags in a Web Page (Basic XSS)" description="This call contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.

Use HTML entities to encode all non-alphanumeric user-supplied data when using it to construct an HTTP response. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=80) 
OWASP (http://www.owasp.org/index.php/XSS)

" note="" cweid="80" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/WebGoat/attack"/>
            </dynamicflaws>
         </cwe>
      </category>
      <category categoryid="12" categoryname="Cryptographic Issues" pcirelated="true">
         <desc>
            <para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
            <para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
            <para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
         </desc>
         <recommendations>
            <para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &quot;security through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate for the data being protected; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
         </recommendations>
         <cwe cweid="331" cwename="Insufficient Entropy" pcirelated="false">
            <description>
               <text text="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand()."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="62" module="WebGoat-5.0-orig.war" type="random" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().

If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.

References: 
CWE (http://cwe.mitre.org/data/definitions/331.html)

" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="WeakSessionID.java" line="77" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
         <cwe cweid="316" cwename="Plaintext Storage in Memory" pcirelated="true">
            <description>
               <text text="The application reads and/or stores sensitive information (such as passwords) unencrypted in memory, leaving it susceptible to compromise or erroneous exposure. An attacker with access to the system running the application may be able to obtain access to this sensitive data by examining core dumps and swap files, or by attaching to the running process with a debugger and searching mapped memory pages.  Unless memory is explicitly overwritten, the sensitive information will persist until it is garbage collected and reallocated for other purposes."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Plaintext Storage in Memory" count="1" issueid="64" module="WebGoat-5.0-orig.war" type="set" description="The set() method reads and/or stores sensitive information (such as passwords) unencrypted in memory, making the data more susceptible to compromise. Even in cases where the variable goes out of scope, the sensitive data remains in volatile memory until that memory is reallocated. Generally an attacker needs local access to the system in order to exploit this type of flaw.

Never store sensitive data in plaintext. Always clear sensitive data after use.

References: 
CWE (http://cwe.mitre.org/data/definitions/316.html)

" note="" cweid="316" remediationeffort="4" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Challenge2Screen.java" line="122" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Plaintext Storage in Memory" count="1" issueid="170" module="WebGoat-5.0-orig.war" type="set" description="The set() method reads and/or stores sensitive information (such as passwords) unencrypted in memory, making the data more susceptible to compromise. Even in cases where the variable goes out of scope, the sensitive data remains in volatile memory until that memory is reallocated. Generally an attacker needs local access to the system in order to exploit this type of flaw.

Never store sensitive data in plaintext. Always clear sensitive data after use.

References: 
CWE (http://cwe.mitre.org/data/definitions/316.html)

" note="" cweid="316" remediationeffort="4" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="WsSAXInjection.java" line="149" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Plaintext Storage in Memory" count="1" issueid="87" module="WebGoat-5.0-orig.war" type="set" description="The set() method reads and/or stores sensitive information (such as passwords) unencrypted in memory, making the data more susceptible to compromise. Even in cases where the variable goes out of scope, the sensitive data remains in volatile memory until that memory is reallocated. Generally an attacker needs local access to the system in order to exploit this type of flaw.

Never store sensitive data in plaintext. Always clear sensitive data after use.

References: 
CWE (http://cwe.mitre.org/data/definitions/316.html)

" note="" cweid="316" remediationeffort="4" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="WsSAXInjection.java" line="208" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Plaintext Storage in Memory" count="1" issueid="11" module="WebGoat-5.0-orig.war" type="set" description="The set() method reads and/or stores sensitive information (such as passwords) unencrypted in memory, making the data more susceptible to compromise. Even in cases where the variable goes out of scope, the sensitive data remains in volatile memory until that memory is reallocated. Generally an attacker needs local access to the system in order to exploit this type of flaw.

Never store sensitive data in plaintext. Always clear sensitive data after use.

References: 
CWE (http://cwe.mitre.org/data/definitions/316.html)

" note="" cweid="316" remediationeffort="4" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="WsSAXInjection.java" line="239" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0">
                  <mitigations>
                     <mitigation action="Mitigated by Design" description="Not concerend" user="Clint Pollock" date="2010-12-03 18:35:00 UTC"/>
                     <mitigation action="Mitigation Accepted" description="Verified and accepted" user="Clint Pollock" date="2010-12-03 18:35:11 UTC"/>
                     <mitigation action="Mitigation Rejected" description="Let fix this issue in next release." user="Clint Pollock" date="2011-01-20 15:00:07 UTC"/>
                  </mitigations>
                  <annotations>
                     <annotation action="Comment" description="Lets fix this later" user="Clint Pollock" date="2010-12-03 18:34:24 UTC"/>
                  </annotations>
               </flaw>
            </staticflaws>
         </cwe>
         <cwe cweid="614" cwename="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" pcirelated="true">
            <description>
               <text text="Setting the Secure attribute on an HTTP cookie instructs the web browser to send it only over a secure channel, such as an SSL connection.  Issuing a cookie without the Secure attribute allows the browser to transmit it over unencrypted connections, which are susceptible to eavesdropping.  It is particularly important to set the Secure attribute on any cookies containing sensitive data, such as authentication information (e.g. &quot;remember me&quot; style functionality)."/>
            </description>
            <manualflaws>
               <flaw severity="3" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="198" module="manual_analysis" type="" description="The application creates session cookies to store a user's session ID when using the application. This cookie is not created with the SECURE and HTTPonly flags enabled. This means that requests that might lead to a user's session ID being accidentally exposed over unencrypted links or client side script interacting directly with the user's cookie. Both flags set at cookie creation add a layer of defense to the overall security of the application." note="" cweid="614" remediationeffort="2" exploitLevel="2" categoryid="12" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" location="" cvss="5.3" capecid="2" exploitdifficulty="0" inputvector="">
                  <remediation_desc>Generate all cookies with the SECURE and HTTPOnly flags set. This will tell the user's browser that these cookies should only be sent over encrypted channels and to prevent client side script from accessing the cookies directly. This helps to prevent a number of potential vulnerabilities.</remediation_desc>
               </flaw>
            </manualflaws>
         </cwe>
         <cwe cweid="321" cwename="Use of Hard-coded Cryptographic Key" pcirelated="true">
            <description>
               <text text="A method uses a hard-coded cryptographic key that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded key significantly increases the possibility that encrypted data may be recovered.  Moreover, the key cannot be changed without patching the software.  If a hard-coded key is compromised in a commercial product, all deployed instances may be vulnerable to attack."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of Hard-coded Cryptographic Key" count="1" issueid="129" module="WebGoat-5.0-orig.war" type="java.security.MessageDigest.update" description="The java.security.MessageDigest.update() method uses a hard-coded cryptographic key that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded key significantly increases the possibility that encrypted data may be recovered. Moreover, the key cannot be changed without patching the software. If a hard-coded key is compromised in a commercial product, all deployed instances may be vulnerable to attack.

Store encryption keys out-of-band from the application code. Follow best practices for protecting keys stored in locations such as configuration or properties files.

References: 
CWE (http://cwe.mitre.org/data/definitions/321.html)

" note="" cweid="321" remediationeffort="4" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Encoding.java" line="641" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="Use of Hard-coded Cryptographic Key" count="1" issueid="21" module="WebGoat-5.0-orig.war" type="java.security.MessageDigest.update" description="The java.security.MessageDigest.update() method uses a hard-coded cryptographic key that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded key significantly increases the possibility that encrypted data may be recovered. Moreover, the key cannot be changed without patching the software. If a hard-coded key is compromised in a commercial product, all deployed instances may be vulnerable to attack.

Store encryption keys out-of-band from the application code. Follow best practices for protecting keys stored in locations such as configuration or properties files.

References: 
CWE (http://cwe.mitre.org/data/definitions/321.html)

" note="" cweid="321" remediationeffort="4" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Encoding.java" line="667" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="1" categoryname="Directory Traversal" pcirelated="false">
         <desc>
            <para text="Allowing user input to control paths used in filesystem operations may enable an attacker to access or modify otherwise protected system resources that would normally be inaccessible to end users.  In some cases, the user-provided input may be passed directly to the filesystem operation, or it may be concatenated to one or more fixed strings to construct a fully-qualified path."/>
            <para text="When an application improperly cleanses special character sequences in user-supplied filenames, a path traversal (or directory traversal) vulnerability may occur.  For example, an attacker could specify a filename such as &quot;../../etc/passwd&quot;, which resolves to a file outside of the intended directory that the attacker would not normally be authorized to view."/>
         </desc>
         <recommendations>
            <para text="Assume all user-supplied input is malicious.  Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters and ensure that the end result is not dangerous."/>
         </recommendations>
         <cwe cweid="73" cwename="External Control of File Name or Path" pcirelated="false">
            <description>
               <text text="This call contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="53" module="WebGoat-5.0-orig.war" type="java.io.File" description="This call to java.io.File() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html)

" note="" cweid="73" remediationeffort="2" exploitLevel="1" categoryid="1" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="CommandInjection.java" line="180" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="146" module="WebGoat-5.0-orig.war" type="java.io.FileInputStream" description="This call to java.io.FileInputStream() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html)

" note="" cweid="73" remediationeffort="2" exploitLevel="1" categoryid="1" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="LessonTracker.java" line="238" sourcefilepath="org/owasp/webgoat/session/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="174" module="WebGoat-5.0-orig.war" type="java.io.FileOutputStream" description="This call to java.io.FileOutputStream() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html)

" note="" cweid="73" remediationeffort="2" exploitLevel="1" categoryid="1" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="LessonTracker.java" line="388" sourcefilepath="org/owasp/webgoat/session/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="99" module="WebGoat-5.0-orig.war" type="java.io.File" description="This call to java.io.File() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html)

" note="" cweid="73" remediationeffort="2" exploitLevel="1" categoryid="1" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="PathBasedAccessControl.java" line="136" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
         <cwe cweid="73" cwename="External Control of File Name or Path" pcirelated="false">
            <description>
               <text text="This call contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="156" module="WebGoat-5.0-orig.war" type="java.io.File" description="This call to java.io.File() contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any.

Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.

References: 
CWE (http://cwe.mitre.org/data/definitions/73.html)

" note="" cweid="73" remediationeffort="2" exploitLevel="1" categoryid="1" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="CommandInjection.java" line="171" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0">
                  <mitigations>
                     <mitigation action="Mitigated by OS Environment" description="These are mitigated due to a validation framework" user="Matt Lantinga" date="2011-01-27 14:57:55 UTC"/>
                     <mitigation action="Mitigation Accepted" description="ok - pls document these" user="Jason Steer" date="2011-05-04 13:26:20 UTC"/>
                  </mitigations>
               </flaw>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="22" categoryname="Encapsulation" pcirelated="false">
         <desc>
            <para text="Encapsulation is about defining strong security boundaries governing data and processes. Within an application, it might mean differentiation between validated and unvalidated data, between public and private members, or between one user's data and another's.  "/>
            <para text="In object-oriented programming, the term encapsulation is used to describe the grouping together of data and functionality within an object and the ability to provide users with a well-defined interface in a way which hides their internal workings.  Though there is some overlap with the above definition, the two definitions should not be confused as being interchangeable."/>
         </desc>
         <recommendations>
            <para text="The wide variance of encapsulation issues makes it impractical to generalize how these issues should be addressed, beyond stating that encapsulation boundaries should be well-defined and adhered to.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="501" cwename="Trust Boundary Violation" pcirelated="false">
            <description>
               <text text="A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted.  This application mixes trusted and untrusted data in the same data structure.  By doing so, it becomes easier for programmers to mistakenly trust unvalidated data.  Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.  A common manifestation of this flaw is in J2EE application, when a Session object is used to store untrusted data from the HTTP request."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Trust Boundary Violation" count="1" issueid="76" module="WebGoat-5.0-orig.war" type="javax.servlet.http.HttpSession.setAttribute" description="This call to javax.servlet.http.HttpSession.setAttribute() mixes trusted and untrusted data in the same data structure, thereby encouraging programmers to mistakenly trust unvalidated data.

Avoid storing untrusted data alongside trusted data in the same data structure. Establish and maintain trust boundaries for data storage.

References: 
CWE (http://cwe.mitre.org/data/definitions/501.html)

" note="" cweid="501" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" sourcefile="DefaultLessonAction.java" line="89" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="2">
      <category categoryid="7" categoryname="API Abuse" pcirelated="false">
         <desc>
            <para text="An API is a contract between a caller and a callee. Incorrect usage of certain API functions can result in exploitable security vulnerabilities."/>
            <para text="The most common forms of API abuse are caused by the caller failing to honor its end of this contract.  For example, if a program fails to call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion.  Providing too few arguments to a varargs function such as printf() also violates the API contract and will cause the missing parameters to be populated with unexpected data from the stack."/>
            <para text="Another common mishap is when the caller makes false assumptions about the callee's behavior.  One example of this is when a caller expects a DNS-related function to return trustworthy information that can be used for authentication purposes.  This is a bad assumption because DNS responses can be easily spoofed."/>
         </desc>
         <recommendations>
            <para text="When calling API functions, be sure to fully understand and adhere to the specifications to avoid introducing security vulnerabilities.  Do not make assumptions about trustworthiness of the data returned from API calls or use the data in a context that was unintended by that API."/>
         </recommendations>
         <cwe cweid="245" cwename="J2EE Bad Practices: Direct Management of Connections" pcirelated="false">
            <description>
               <text text="The J2EE application directly manages connections rather than using the container's resource management facilities to obtain connections as specified in the J2EE standard.  Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="92" module="WebGoat-5.0-orig.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" sourcefile="CreateDB.java" line="69" sourcefilepath="org/owasp/webgoat/session/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="103" module="WebGoat-5.0-orig.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" sourcefile="DatabaseUtilities.java" line="68" sourcefilepath="org/owasp/webgoat/session/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="93" module="WebGoat-5.0-orig.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" sourcefile="DatabaseUtilities.java" line="78" sourcefilepath="org/owasp/webgoat/session/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
         <cwe cweid="245" cwename="J2EE Bad Practices: Direct Management of Connections" pcirelated="false">
            <description>
               <text text="The J2EE application directly manages connections rather than using the container's resource management facilities to obtain connections as specified in the J2EE standard.  Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="131" module="WebGoat-5.0-orig.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="Agree." cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" sourcefile="DatabaseUtilities.java" line="97" sourcefilepath="org/owasp/webgoat/session/" scope="" functionprototype="" functionrelativelocation="0">
                  <mitigations>
                     <mitigation action="Mitigated as Potential False Positive" description="This call is an FP because the code is never called." user="Timothy Jarrett" date="2011-07-01 02:50:46 UTC"/>
                     <mitigation action="Mitigation Accepted" description="Agree." user="Veracode" date="2011-07-01 03:24:12 UTC"/>
                  </mitigations>
                  <annotations>
                     <annotation action="Mitigated as Potential False Positive" description="This call is an FP because the code is never called." user="Timothy Jarrett" date="2011-07-01 02:50:46 UTC"/>
                  </annotations>
               </flaw>
               <flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="145" module="WebGoat-5.0-orig.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" sourcefile="DatabaseUtilities.java" line="105" sourcefilepath="org/owasp/webgoat/session/" scope="" functionprototype="" functionrelativelocation="0">
                  <mitigations>
                     <mitigation action="Mitigated by Design" description="This is handled elsewhere in the servlet." user="Tim Jarrett" date="2011-03-04 21:32:26 UTC"/>
                     <mitigation action="Mitigation Accepted" description="Sure -sounds fine with - can you send me the details." user="Jason Steer" date="2011-04-12 15:54:49 UTC"/>
                  </mitigations>
               </flaw>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="17" categoryname="Code Quality" pcirelated="false">
         <desc>
            <para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to:">
               <bulletitem text="Neglecting to remove debug code or dead code"/>
               <bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
               <bulletitem text="Using the incorrect operator to compare objects"/>
               <bulletitem text="Failing to follow an API or framework specification"/>
               <bulletitem text="Using a language feature or API in an unintended manner"/>
            </para>
            <para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
         </desc>
         <recommendations>
            <para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="561" cwename="Dead Code" pcirelated="false">
            <description>
               <text text="This code will never be executed in a running program. The surrounding code makes it impossible for this to ever be executed.  Dead code often exposes application logic flaws that can result in unaddressed vulnerabilities."/>
            </description>
            <manualflaws>
               <flaw severity="2" categoryname="Dead Code" count="1" issueid="201" module="manual_analysis" type="" description="A number of pages contained potentially dangerous dead code. Code which was either commented out or unreachable in the current state. Over time these snippets of code may become active and pose a risk to the application's security. " note="" cweid="561" remediationeffort="1" exploitLevel="2" categoryid="17" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" location="" cvss="3" capecid="1" exploitdifficulty="0" inputvector="https://app.biz.com/admin/filter.do">
                  <remediation_desc>Remove all unused code from the production system to prevent its accidental accessibility as the code evolves over time.</remediation_desc>
               </flaw>
            </manualflaws>
         </cwe>
         <cwe cweid="404" cwename="Improper Resource Shutdown or Release" pcirelated="false">
            <description>
               <text text="The application fails to release (or incorrectly releases) a system resource before it is made available for re-use.  This condition often occurs with resources such as database connections or file handles.  Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be possible to launch a denial of service attack by depleting the resource pool."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Improper Resource Shutdown or Release" count="1" issueid="52" module="WebGoat-5.0-orig.war" type="java.sql.Connection.createStatement" description="There are total of 117 instances. The program fails to release or incorrectly releases some variables, e.g. the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().

Ensure that all code paths properly release this resource.

References: 
CWE (http://cwe.mitre.org/data/definitions/404.html)

" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="nnc" grace_period_expires="" affects_policy_compliance="false" sourcefile="ViewDatabase.java" line="86" sourcefilepath="org/owasp/webgoat/lessons/admin/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="12" categoryname="Cryptographic Issues" pcirelated="true">
         <desc>
            <para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
            <para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
            <para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
         </desc>
         <recommendations>
            <para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &quot;security through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate for the data being protected; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
         </recommendations>
         <cwe cweid="614" cwename="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" pcirelated="true">
            <description>
               <text text="Setting the Secure attribute on an HTTP cookie instructs the web browser to send it only over a secure channel, such as an SSL connection.  Issuing a cookie without the Secure attribute allows the browser to transmit it over unencrypted connections, which are susceptible to eavesdropping.  It is particularly important to set the Secure attribute on any cookies containing sensitive data, such as authentication information (e.g. &quot;remember me&quot; style functionality)."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="63" module="WebGoat-5.0-orig.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Challenge2Screen.java" line="172" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="15" module="WebGoat-5.0-orig.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="Challenge2Screen.java" line="193" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0">
                  <annotations>
                     <annotation action="Comment" description="I am investigating this particular flaw.  I should have results in 24 hours" user="Jeff Ennis" date="2010-03-24 18:40:29 UTC"/>
                  </annotations>
               </flaw>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="77" module="WebGoat-5.0-orig.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="WeakAuthenticationCookie.java" line="146" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="25" module="WebGoat-5.0-orig.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="WeakSessionID.java" line="209" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="70" module="WebGoat-5.0-orig.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="WebSession.java" line="335" sourcefilepath="org/owasp/webgoat/session/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="8" categoryname="Information Leakage" pcirelated="true">
         <desc>
            <para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product's own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
            <para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to:">
               <bulletitem text="Source code disclosure"/>
               <bulletitem text="Browsable directories"/>
               <bulletitem text="Log files or backup files in web-accessible directories"/>
               <bulletitem text="Unfiltered backend error messages"/>
               <bulletitem text="Exception stack traces"/>
               <bulletitem text="Server version information"/>
               <bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
            </para>
         </desc>
         <recommendations>
            <para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
            <para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application's web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
         </recommendations>
         <cwe cweid="497" cwename="Exposure of System Data to an Unauthorized Control Sphere" pcirelated="false">
            <description>
               <text text="The application reveals system data or other debugging information.   While not directly exploitable, information leaks often facilitate other attacks against the application."/>
            </description>
            <manualflaws>
               <flaw severity="2" categoryname="Exposure of System Data to an Unauthorized Control Sphere" count="1" issueid="200" module="manual_analysis" type="" description="A deployed Struts action contains a full description of the run environment, including 3rd party code versions and configuration options. All of which could aid an attacker in exploiting vulnerabilities in the system." note="" cweid="497" remediationeffort="1" exploitLevel="2" categoryid="8" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" location="" cvss="3" capecid="9" exploitdifficulty="0" inputvector="https://app.biz.com/account/test.php">
                  <remediation_desc>Remove all test code from the production environment. If required to provide this type of information in the production environment, for example for administrative purposes, add checks to ensure the user is authenticated and authorized before returning the system information.</remediation_desc>
               </flaw>
               <flaw severity="2" categoryname="Exposure of System Data to an Unauthorized Control Sphere" count="1" issueid="202" module="manual_analysis" type="" description="A number of pages in the application included code which returned SQL error messages back to the user. This information can be used to refine a SQL injection attack. " note="" cweid="497" remediationeffort="1" exploitLevel="2" categoryid="8" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" location="" cvss="3" capecid="9" exploitdifficulty="0" inputvector="">
                  <remediation_desc>Catch all database errors and log them for review by administrative users. Return only generic error messages to end users.</remediation_desc>
               </flaw>
            </manualflaws>
         </cwe>
         <cwe cweid="215" cwename="Information Exposure Through Debug Information" pcirelated="false">
            <description>
               <text text="The TRACE verb supported by most web servers can be manipulated to produce a cross-site scripting attack that results in sending arbitrary HTML to the victim's browser. The TRACE verb is designed to echo a user's input and intended for debugging or testing a web server. The TRACE verb is not generally required for web applications to function."/>
               <text text="An attacker will usually exploit Cross-Site Tracing (XST) in conjuction with a Cross-Site Scripting (XSS) vulnerability on a separate website.  However, XST is caused by the web server configuration whereas XSS is a flaw in the web application itself."/>
            </description>
            <dynamicflaws>
               <flaw severity="2" categoryname="Information Exposure Through Debug Information" count="1" issueid="176" module="dynamic_analysis" type="Information Leak Through Debug Information" description="The TRACE verb supported by most web servers can be manipulated to produce a cross-site scripting attack that results in sending arbitrary HTML to the victim's browser. The TRACE verb is designed to echo a user's input and intended for debugging or testing a web server. The TRACE verb is not generally required for web applications to function.An attacker will usually exploit Cross-Site Tracing (XST) in conjuction with a Cross-Site Scripting (XSS) vulnerability on a separate website. However, XST is caused by the web server configuration whereas XSS is a flaw in the web application itself.

Refer to your web server's documentation for information on how to disable the TRACE method.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=215)

" note="" cweid="215" remediationeffort="1" categoryid="8" pcirelated="false" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" url="http://www.veracode.com/"/>
            </dynamicflaws>
         </cwe>
         <cwe cweid="548" cwename="Information Exposure Through Directory Listing" pcirelated="true">
            <description>
               <text text="A full directory listing is inappropriately exposed, yielding potentially sensitive information to attackers, including file names, and directory structures. This directory listing gives a potential attacker a listing of the files in this directory and the ability to browse sub-directories. Files containing potentially sensitive information is usually exposed through this vulnerability."/>
            </description>
            <dynamicflaws>
               <flaw severity="2" categoryname="Information Exposure Through Directory Listing" count="1" issueid="177" module="dynamic_analysis" type="Information Leak Through Directory Listing" description="A full directory listing is inappropriately exposed, yielding potentially sensitive information to attackers, including file names, and directory structures. This directory listing gives a potential attacker a listing of the files in this directory and the ability to browse sub-directories. Files containing potentially sensitive information is usually exposed through this vulnerability.

Refer to your web server's documentation for instructions on prohibiting directory browsing.


CWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=548) 
OWASP (http://www.owasp.org/index.php/File_System)

" note="" cweid="548" remediationeffort="1" categoryid="8" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" url="http://localhost:8080/admin/"/>
            </dynamicflaws>
         </cwe>
         <cwe cweid="209" cwename="Information Exposure Through an Error Message" pcirelated="true">
            <description>
               <text text="The software generates an error message that includes sensitive information about its environment, users, or associated data.  The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.  For example, file locations disclosed by an exception stack trace may be levereged by an attacker to exploit a path traversal issue elsewhere in the application."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="47" module="WebGoat-5.0-orig.war" type="java.io.PrintWriter.print" description="The application calls the java.io.PrintWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2009-04-23 20:58:24 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="2011-05-07 01:00:00 UTC" affects_policy_compliance="true" sourcefile="XMLInjection.java" line="119" sourcefilepath="org/owasp/webgoat/lessons/" scope="" functionprototype="" functionrelativelocation="0"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="1"/>
   <severity level="0"/>
   <flaw-status new="199" reopen="0" open="0" fixed="0" total="199" not_mitigated="196" sev-1-change="0" sev-2-change="17" sev-3-change="137" sev-4-change="34" sev-5-change="11"/>
</detailedreport>
