<?xml version="1.0" encoding="ISO-8859-1"?>

<detailedreport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.veracode.com/schema/reports/export/1.0" xsi:schemaLocation="https://www.veracode.com/schema/reports/export/1.0 https://analysiscenter.veracode.com/resource/detailedreport.xsd" report_format_version="1.1" app_name="WebGoat" app_id="39624" first_build_submitted_date="2012-07-23 17:20:12 UTC" version="5.4" build_id="60062" submitter="Geoff Whittington" platform="Java" assurance_level="3" business_criticality="3" generation_date="2012-08-10 14:21:55 UTC" veracode_level="VL1" total_flaws="309" flaws_not_mitigated="309" teams="" life_cycle_stage="External or Beta Testing" planned_deployment_date="" last_update_time="2012-07-23 17:28:54 UTC" is_latest_build="true" policy_name="Veracode Recommended Medium" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="">
   <static-analysis rating="C" score="52" submitted_date="2012-07-23 16:40:15 UTC" published_date="2012-07-23 17:28:40 UTC" next_scan_due="2012-10-23 17:28:40 UTC" analysis_size_bytes="5696613">
      <modules>
         <module name="WebGoat-5.4.war" compiler="JAVAC_6" os="Java J2SE 6" architecture="JVM" loc="193412" score="52" numflawssev0="1" numflawssev1="0" numflawssev2="22" numflawssev3="264" numflawssev4="20" numflawssev5="2"/>
      </modules>
   </static-analysis>
   <severity level="2">
      <category categoryid="7" categoryname="API Abuse" pcirelated="false">
         <desc>
            <para text="An API is a contract between a caller and a callee. Incorrect usage of certain API functions can result in exploitable security vulnerabilities."/>
            <para text="The most common forms of API abuse are caused by the caller failing to honor its end of this contract.  For example, if a program fails to call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion.  Providing too few arguments to a varargs function such as printf() also violates the API contract and will cause the missing parameters to be populated with unexpected data from the stack."/>
            <para text="Another common mishap is when the caller makes false assumptions about the callee's behavior.  One example of this is when a caller expects a DNS-related function to return trustworthy information that can be used for authentication purposes.  This is a bad assumption because DNS responses can be easily spoofed."/>
         </desc>
         <recommendations>
            <para text="When calling API functions, be sure to fully understand and adhere to the specifications to avoid introducing security vulnerabilities.  Do not make assumptions about trustworthiness of the data returned from API calls or use the data in a context that was unintended by that API."/>
         </recommendations>
         <cwe cweid="245" cwename="J2EE Bad Practices: Direct Management of Connections" pcirelated="false">
            <description>
               <text text="The J2EE application directly manages connections rather than using the container's resource management facilities to obtain connections as specified in the J2EE standard.  Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="150" module="WebGoat-5.4.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" sourcefile="DatabaseUtilities.java" line="100" sourcefilepath="org/owasp/webgoat/session/" scope="org.owasp.webgoat.session.DatabaseUtilities" functionprototype="java.sql.Connection makeConnection(java.lang.String, WebgoatContext)" functionrelativelocation="63"/>
               <flaw severity="2" categoryname="J2EE Bad Practices: Direct Management of Connections" count="1" issueid="73" module="WebGoat-5.4.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.

Request the connection from the container rather than attempting to access it directly.

References: 
CWE (http://cwe.mitre.org/data/definitions/245.html)

" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" sourcefile="DatabaseUtilities.java" line="112" sourcefilepath="org/owasp/webgoat/session/" scope="org.owasp.webgoat.session.DatabaseUtilities" functionprototype="java.sql.Connection getHsqldbConnection(java.lang.String, WebgoatContext)" functionrelativelocation="95"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="17" categoryname="Code Quality" pcirelated="false">
         <desc>
            <para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to:">
               <bulletitem text="Neglecting to remove debug code or dead code"/>
               <bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
               <bulletitem text="Using the incorrect operator to compare objects"/>
               <bulletitem text="Failing to follow an API or framework specification"/>
               <bulletitem text="Using a language feature or API in an unintended manner"/>
            </para>
            <para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
         </desc>
         <recommendations>
            <para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="404" cwename="Improper Resource Shutdown or Release" pcirelated="false" certc="743" certcpp="876" certjava="857">
            <description>
               <text text="The application fails to release (or incorrectly releases) a system resource before it is made available for re-use.  This condition often occurs with resources such as database connections or file handles.  Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be possible to launch a denial of service attack by depleting the resource pool."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Improper Resource Shutdown or Release" count="1" issueid="97" module="WebGoat-5.4.war" type="java.sql.Connection.createStatement" description="There are total of 130 instances. The program fails to release or incorrectly releases some variables, e.g. the variable target_statement, which was previously allocated by a call to java.sql.Connection.createStatement().

Ensure that all code paths properly release this resource.

References: 
CWE (http://cwe.mitre.org/data/definitions/404.html)

" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="nnc" grace_period_expires="" affects_policy_compliance="false" sourcefile="SqlAddData.java" line="87" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.SqlAddData" functionprototype="apache.ecs.Element createContent(session.WebSession)" functionrelativelocation="17"/>
            </staticflaws>
         </cwe>
         <cwe cweid="597" cwename="Use of Wrong Operator in String Comparison" pcirelated="false" certjava="847">
            <description>
               <text text="Using '==' to compare two strings for equality or '!=' for inequality actually compares the object references rather than their values.  It is unlikely that this reflects the intended application logic."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="22" module="WebGoat-5.4.war" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="WeakAuthenticationCookie.java" line="142" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.WeakAuthenticationCookie" functionprototype="java.lang.String checkParams(session.WebSession)" functionrelativelocation="67"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="47" module="WebGoat-5.4.war" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="XMLInjection.java" line="234" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.XMLInjection" functionprototype="apache.ecs.Element createContent(session.WebSession)" functionrelativelocation="85"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="179" module="WebGoat-5.4.war" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="XMLInjection.java" line="236" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.XMLInjection" functionprototype="apache.ecs.Element createContent(session.WebSession)" functionrelativelocation="86"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="41" module="WebGoat-5.4.war" type="span.neq" description="Using '==' to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

Use the equals() method to compare strings, not the '==' operator.

References: 
CWE (http://cwe.mitre.org/data/definitions/597.html)

" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="XMLInjection.java" line="246" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.XMLInjection" functionprototype="apache.ecs.Element createContent(session.WebSession)" functionrelativelocation="93"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="12" categoryname="Cryptographic Issues" pcirelated="true">
         <desc>
            <para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
            <para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
            <para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
         </desc>
         <recommendations>
            <para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &quot;security through obscurity&quot; rather than sound mathematics.  Select key sizes appropriate for the data being protected; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
         </recommendations>
         <cwe cweid="614" cwename="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" pcirelated="true" owasp="816" sans="311">
            <description>
               <text text="Setting the Secure attribute on an HTTP cookie instructs the web browser to send it only over a secure channel, such as an SSL connection.  Issuing a cookie without the Secure attribute allows the browser to transmit it over unencrypted connections, which are susceptible to eavesdropping.  It is particularly important to set the Secure attribute on any cookies containing sensitive data, such as authentication information (e.g. &quot;remember me&quot; style functionality)."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="142" module="WebGoat-5.4.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html) 
WASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="Challenge2Screen.java" line="172" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.Challenge2Screen" functionprototype="apache.ecs.Element doStage1(session.WebSession)" functionrelativelocation="75"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="256" module="WebGoat-5.4.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html) 
WASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="Challenge2Screen.java" line="195" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.Challenge2Screen" functionprototype="apache.ecs.Element doStage2(session.WebSession)" functionrelativelocation="4"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="78" module="WebGoat-5.4.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html) 
WASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="WeakAuthenticationCookie.java" line="146" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.WeakAuthenticationCookie" functionprototype="java.lang.String checkParams(session.WebSession)" functionrelativelocation="88"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="250" module="WebGoat-5.4.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html) 
WASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="WeakSessionID.java" line="200" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.WeakSessionID" functionprototype="apache.ecs.Element makeLogin(session.WebSession)" functionrelativelocation="8"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" count="1" issueid="147" module="WebGoat-5.4.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.

Set the Secure attribute for all cookies used by HTTPS sessions.

References: 
CWE (http://cwe.mitre.org/data/definitions/614.html) 
WASC (http://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)

" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="WebSession.java" line="276" sourcefilepath="org/owasp/webgoat/session/" scope="org.owasp.webgoat.session.WebSession" functionprototype="void eatCookies()" functionrelativelocation="79"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="8" categoryname="Information Leakage" pcirelated="true">
         <desc>
            <para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product's own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
            <para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to:">
               <bulletitem text="Source code disclosure"/>
               <bulletitem text="Browsable directories"/>
               <bulletitem text="Log files or backup files in web-accessible directories"/>
               <bulletitem text="Unfiltered backend error messages"/>
               <bulletitem text="Exception stack traces"/>
               <bulletitem text="Server version information"/>
               <bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
            </para>
         </desc>
         <recommendations>
            <para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
            <para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application's web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
         </recommendations>
         <cwe cweid="201" cwename="Information Exposure Through Sent Data" pcirelated="false">
            <description>
               <text text="Sensitive information may be exposed as a result of outbound network connections made by the application.  This can manifest in a couple of different ways."/>
               <text text="In C/C++ applications, sometimes the developer fails to zero out a buffer before populating it with data.  This can cause information leakage if, for example, the buffer contains a data structure for which only certain fields were populated.  The uninitialized fields would contain whatever data is present at that memory location.  Sensitive information from previously allocated variables could then be leaked when the buffer is sent over the network."/>
               <text text="Mobile applications may also transmit sensitive information such as email or SMS messages, address book entries, GPS location data, and anything else that can be accessed by the mobile API.  This behavior is common in mobile spyware applications designed to exfiltrate data to a listening post or other data collection point.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="223" module="WebGoat-5.4.war" type="java.io.Writer.write" description="The application calls the java.io.Writer.write() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The first argument to write() contains potentially sensitive data from the variable browserFiles. The potentially sensitive data originated from an earlier call to java.lang.system.getproperty. The potentially sensitive data is directed into an output stream returned by java.net.urlconnection.getoutputstream.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="BlindScript.java" line="179" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.BlindScript" functionprototype="void executeSpyWare(session.WebSession)" functionrelativelocation="75"/>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="92" module="WebGoat-5.4.war" type="java.io.PrintWriter.print" description="The application calls the java.io.PrintWriter.print() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The first argument to print() contains potentially sensitive data from the variable jsonStr. The potentially sensitive data originated from an earlier call to java.lang.system.getproperty. The potentially sensitive data is directed into an output stream returned by javax.servlet.servletresponse.getoutputstream.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="JSONInjection.java" line="80" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.JSONInjection" functionprototype="void handleRequest(session.WebSession)" functionrelativelocation="68"/>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="27" module="WebGoat-5.4.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The first argument to print() contains potentially sensitive data from the variable currentLesson.getLessonPlan(). The potentially sensitive data originated from earlier calls to javax.servlet.servletrequest.getparametervaluesjava.lang.system.getproperty, and java.lang.system.getenv. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="main.jsp" line="252" sourcefilepath="/" scope="com.veracode.compiledjsp.xWebGoat54war.main_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="84"/>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="64" module="WebGoat-5.4.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The first argument to print() contains potentially sensitive data from the variable webSession.getInstructions(). The potentially sensitive data originated from an earlier call to javax.servlet.servletcontext.getrealpath. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="main.jsp" line="267" sourcefilepath="/" scope="com.veracode.compiledjsp.xWebGoat54war.main_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="89"/>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="238" module="WebGoat-5.4.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The first argument to print() contains potentially sensitive data from the variable webSession.getWebgoatContext().getFeedbackAddress(). The potentially sensitive data originated from an earlier call to java.lang.system.getenv. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="reportBug.jsp" line="48" sourcefilepath="/" scope="com.veracode.compiledjsp.xWebGoat54war.reportBug_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="51"/>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="280" module="WebGoat-5.4.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The first argument to print() contains potentially sensitive data from the variable webSession.getWebgoatContext().getFeedbackAddress(). The potentially sensitive data originated from an earlier call to java.lang.system.getenv. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="reportBug.jsp" line="55" sourcefilepath="/" scope="com.veracode.compiledjsp.xWebGoat54war.reportBug_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="66"/>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="106" module="WebGoat-5.4.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The first argument to print() contains potentially sensitive data from the variable webSession.getWebgoatContext().getFeedbackAddress(). The potentially sensitive data originated from an earlier call to java.lang.system.getenv. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="webgoat.jsp" line="25" sourcefilepath="/" scope="com.veracode.compiledjsp.xWebGoat54war.webgoat_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="47"/>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="50" module="WebGoat-5.4.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The first argument to print() contains potentially sensitive data from the variable webSession.getWebgoatContext().getFeedbackAddress(). The potentially sensitive data originated from an earlier call to java.lang.system.getenv. The potentially sensitive data is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="webgoat_challenge.jsp" line="26" sourcefilepath="/" scope="com.veracode.compiledjsp.xWebGoat54war.webgoat_005fchallenge_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="47"/>
               <flaw severity="2" categoryname="Information Exposure Through Sent Data" count="1" issueid="261" module="WebGoat-5.4.war" type="java.io.PrintWriter.print" description="The application calls the java.io.PrintWriter.print() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The first argument to print() contains potentially sensitive data from the variable xmlStr. The potentially sensitive data originated from an earlier call to java.lang.system.getproperty. The potentially sensitive data is directed into an output stream returned by javax.servlet.servletresponse.getoutputstream.

Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.

References: 
CWE (http://cwe.mitre.org/data/definitions/201.html) 
WASC (http://webappsec.pbworks.com/Information-Leakage)

" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="XMLInjection.java" line="112" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.XMLInjection" functionprototype="void handleRequest(session.WebSession)" functionrelativelocation="69"/>
            </staticflaws>
         </cwe>
         <cwe cweid="209" cwename="Information Exposure Through an Error Message" pcirelated="true" owasp="815" sans="801" certcpp="880" certjava="851">
            <description>
               <text text="The software generates an error message that includes sensitive information about its environment, users, or associated data.  The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.  For example, file locations disclosed by an exception stack trace may be levereged by an attacker to exploit a path traversal issue elsewhere in the application."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Information Exposure Through an Error Message" count="1" issueid="136" module="WebGoat-5.4.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing user-specified or database data) from the variable webSession.getMessage(). The data from an error message (possibly containing user-specified or database data) originated from earlier calls to javax.servlet.servletrequest.getparametervalues, javax.servlet.http.httpservletrequest.getheader, and javax.servlet.http.httpservletrequest.getcookiesjava.util.properties.loadjava.lang.throwable.getlocalizedmessage. The data from an error message (possibly containing user-specified or database data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.

Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/209.html)

" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" sourcefile="main.jsp" line="268" sourcefilepath="/" scope="com.veracode.compiledjsp.xWebGoat54war.main_jsp" functionprototype="void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" functionrelativelocation="90"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="1"/>
   <severity level="0">
      <category categoryid="30" categoryname="Potential Backdoor" pcirelated="false">
         <desc>
            <para text="Application backdoors are modifications to programs that are designed to bypass security mechanisms or inject malicious functionality.  Backdoors are often inserted by rogue developers with legitimate access to the source code or distribution binaries.  Backdoors can take many forms, such as hard-coded credentials, &quot;easter egg&quot; style functionality, rootkits, or time bombs, among others."/>
         </desc>
         <recommendations>
            <para text="Investigate all potential backdoors thoroughly to ensure there is no undesirable functionality. If the backdoors are real, eliminate them, and initiate a broader effort to inspect the entire codebase for malicious code. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker."/>
         </recommendations>
         <cwe cweid="656" cwename="Reliance on Security Through Obscurity" pcirelated="false">
            <description>
               <text text="The strength of a security mechanism depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to allow the mechanism to be compromised."/>
            </description>
            <staticflaws>
               <flaw severity="0" categoryname="Reliance on Security Through Obscurity" count="1" issueid="206" module="WebGoat-5.4.war" type="javax.crypto.Cipher.doFinal" description="The application decrypts or decodes embedded data. Encryption or encoding of embedded data is typically done to obfuscate the true intention of the data and to hinder reverse engineering efforts. javax.crypto.Cipher.doFinal

This message is purely information and does not represent a flaw in the code. Therefore, no remediation is necessary.

References: 
CWE (http://cwe.mitre.org/data/definitions/656.html)

" note="" cweid="656" remediationeffort="3" exploitLevel="0" categoryid="30" pcirelated="false" date_first_occurrence="2012-07-23 16:23:28 UTC" remediation_status="New" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" sourcefile="Encoding.java" line="335" sourcefilepath="org/owasp/webgoat/lessons/" scope="org.owasp.webgoat.lessons.Encoding" functionprototype="java.lang.String decryptString(java.lang.String, java.lang.String)" functionrelativelocation="80"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <flaw-status new="309" reopen="0" open="0" fixed="0" total="309" not_mitigated="309" sev-1-change="0" sev-2-change="22" sev-3-change="264" sev-4-change="20" sev-5-change="2"/>
</detailedreport>
