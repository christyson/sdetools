#NOTE: Before running ensure that the options are set
#properly in the configuration file

import sys, os, unittest
sys.path.append(os.path.split(os.path.split(os.path.split(os.path.abspath(__file__))[0])[0])[0])
import csv, random

from sdelib.conf_mgr import config
from sdelib.interactive_plugin import PlugInExperience
import logging

from rally_integration.lib.rally_plugin import RallyTask, RallyConnector
from rally_integration.lib.rally_plugin import add_rally_config_options
from rally_integration.lib.rally_plugin import RallyAPIBase


CONF_FILE_LOCATION = 'test_settings.conf'

class TestRallyCase(unittest.TestCase):
     def setUp(self):
          add_rally_config_options(config)
          config.parse_config_file(CONF_FILE_LOCATION)
          self.plugin = PlugInExperience(config)
          mbase = RallyAPIBase(config)
          self.tac = RallyConnector(self.plugin, mbase)
          self.sde_tasks = None
          self.alm_tasks = None
          """Tests that we can connect to SD Elements """
          self.assertNotEqual(self.tac, None)
          self.tac.sde_connect()
          self.tac.alm_connect()
          self.assertTrue(self.tac.is_sde_connected())


     def test_sde_get_tasks(self):
          """First get all SD ELements tasks"""
          self.sde_tasks = self.tac.sde_get_tasks()
          self.assertTrue(len(self.sde_tasks) > 0)
          
          #Check to see that all of the expected fields are there
          #Accessing a non-existant field should raise an exception
          for task in self.sde_tasks:
               task['status']
               task['timestamp']
               task['phase']
               task['id']
               task['priority']
               task['note_count']


     def __create_test_task(self):
          random_id = 'T%d' % random.randint(1, 999999999)
          random_title = '%s: Test task' % (random_id)
          return  {'status': 'TODO',
                    'contextrulesets': [],
                    'timestamp': 1343386079,
                    'note_count': 0,
                    'implementations': [],
                    'phase': 'requirements',
                    'id': random_id,
                     
                    'categories': ['Authentication'],
                    'priority': 10,
                     'weakness': {
                          'content': 'This is a test problem generated' +
                          ' by a test script',
                          'title': 'W9999: Test Weakness',
                          'id': 'W9999',
                          'cwe_id': 0},
                    'title': random_title,
                    'url': 'https://example.sdelements.com/library/tasks/T99999/',
                    'age': 'current',
                    'project': 0,
                    'assigned_to': ['bob@example.com'],
                    'content': 'This is a test task generated by a test script'}
          
          
          
     def test_rally_add_task(self):
          test_task = self.__create_test_task()
          alm_key = self.tac.alm_add_task(test_task)
          test_task_result = self.tac.alm_get_task(test_task)
          self.assertFalse(test_task_result == None)
          print test_task_result.__dict__

     def test_rally_update_task_status(self):
          test_task = self.__create_test_task()
          self.tac.alm_add_task(test_task)
          rally_task = self.tac.alm_get_task(test_task)

          self.tac.alm_update_task_status(rally_task,'DONE')
          test_task_result = self.tac.alm_get_task(test_task)
          self.assertTrue (test_task_result.get_status() == 'DONE')

          test_task2 = self.__create_test_task()
          self.tac.alm_add_task(test_task2)
          rally_task2 = self.tac.alm_get_task(test_task2)

          self.tac.alm_update_task_status(rally_task2,'NA')
          test_task2_result = self.tac.alm_get_task(test_task2)
          self.assertTrue ((test_task2_result.get_status() == 'DONE') or
                           (test_task2_result.get_status() == 'NA'))          

          
     def test_synchronize(self):
          """ Tests if full-fledged synchronization worked (i.e. no
              exceptions rasied """
          self.tac.synchronize()
          pass
               
               
if __name__ == "__main__":
    unittest.main()

